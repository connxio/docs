"use strict";(self.webpackChunkconnxio_docs=self.webpackChunkconnxio_docs||[]).push([[5003],{1121:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(5893),i=t(1151);const o={sidebar_position:6,title:"Resending API",pagination_next:null},r="Resending With Archeo",a={id:"reference/resending-api",title:"Resending API",description:"Resending with Archeo behaves differently based upon the event type you react to. Only one of the two event types are enabled at present which means that Connxio supports only one type of Archeo-resending mechanism. We will describe both of them here, the non-active methods will be marked. If you need to use non-active methods, please contact us for more information.",source:"@site/../docs/reference/resending-api.md",sourceDirName:"reference",slug:"/reference/resending-api",permalink:"/docs/reference/resending-api",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Resending API",pagination_next:null},sidebar:"connxioSidebar",previous:{title:"Get all subscriptions",permalink:"/docs/reference/subscriptions/get-all-subscriptions"}},c={},d=[{value:"Stateless resending",id:"stateless-resending",level:2},{value:"Stateful resending",id:"stateful-resending",level:2},{value:"Resend Events",id:"resend-events",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"resending-with-archeo",children:"Resending With Archeo"}),"\n",(0,s.jsx)(n.p,{children:"Resending with Archeo behaves differently based upon the event type you react to. Only one of the two event types are enabled at present which means that Connxio supports only one type of Archeo-resending mechanism. We will describe both of them here, the non-active methods will be marked. If you need to use non-active methods, please contact us for more information."}),"\n",(0,s.jsx)(n.h2,{id:"stateless-resending",children:"Stateless resending"}),"\n",(0,s.jsxs)(n.p,{children:["By stateless resending we mean the process of resending a message from the beginning of the pipeline. This is really just a way to access any Connxio pipeline via an Api entry point. The endpoint used for stateless resending is hosted in the Connxio Api in the same way as the ",(0,s.jsx)(n.a,{href:"/integrations/adapters/inbound/Api",children:"Api adapter"})," in the ",(0,s.jsx)(n.code,{children:"resend/archeo/restart"})," Uri. We currently support the Archeo contract for resending only. This does not disqualify other systems from using the resending, they just have to conform to the Archeo contract which looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class ArcheoResendEventRequest\n{\n    public string TransactionId { get; set; }\n    public string ContentSasUri { get; set; }\n    public string ResendDateTime { get; set; }\n    public ArcheoLogStepMetaData LogStepMetaData { get; set; }\n}\n\npublic class ArcheoLogStepMetaData\n{\n    public string TransactionId { get; set; }\n    public string Description { get; set; }\n    public string TransactionTypeName { get; set; }\n    public string MessageTypeName { get; set; }\n    public string SenderName { get; set; }\n    public string RecieverName { get; set; }\n    public string StatusName { get; set; }\n    public string FileName { get; set; }\n    public DateTime Processed { get; set; }\n    public Dictionary<string, string> Metadata { get; set; }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you use the Archeo resending functionality all these fields are set and handled for you. If you want to use another system to pass resending requests to Connxio you need to fill out at least three fields:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ArcheoResendEventRequest.TransactionId"})," which represents the InterchangeId of the message. This should be set to the same id as the original message."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'ArcheoResendEventRequest.LogStepMetaData.Metadata["ConfigCorrelatioId"]'})," which describes the integration configuration to use when inflating the pipeline."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ArcheoResendEventRequest.ContentSasUri"})," which points to the message content SAS uri or hosted endpoint."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"As log as these three properties are set the resending event should restart the pipeline and keep logging to the same InterchangeId."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"If you use Archeo as the resending provider you do not need to set these properties manually as they are handled by Archeo when you set up a resending webhook."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This concludes the description and tutorial for stateless resending. To summarize all you need to do to resend with this method is to create a Api request that contains a message Uri (presumably provided by the log event framework from Connxio and saved by your logging provider), an InterchangeId and a CorrelationId."}),"\n",(0,s.jsx)(n.h2,{id:"stateful-resending",children:"Stateful resending"}),"\n",(0,s.jsx)(n.admonition,{title:"in development",type:"caution",children:(0,s.jsxs)(n.p,{children:["This functionality is in development. Read more on the ",(0,s.jsx)(n.a,{href:"/Functionality",children:"functionality page"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["Stateful resending refers to the process of re-inserting a message into the Connxio pipeline at the point of failure. This process is facilitated by a component within Connxio that performs draining of stopped messages within Connxio. Currently this process is developed but is non-active, which means that the required ",(0,s.jsx)(n.a,{href:"/integrations/logging",children:"Resendable"})," events are not generated by the Connxio platform."]}),"\n",(0,s.jsxs)(n.p,{children:["To resend a message with stateful resending you need to provide Connxio with a more detailed version of the ",(0,s.jsx)(n.code,{children:"ArcheoResendEventRequest"})," that contains encoded data which refers to the messages passed between engines within Connxio itself. Since this data is impossible to recreate outside Connxio you need the provided Resendable events to be able to use stateful resending."]}),"\n",(0,s.jsxs)(n.p,{children:["When a Resendable event is received in your provider of choice you can map the event to the inbound model defined on the ",(0,s.jsx)(n.code,{children:"resend/archeo"})," endpoint and restart the pipeline. Including the fields required for the stateless resending process you also need to fill the following field:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'ArcheoResendEventRequest.LogStepMetaData.Metadata["OriginalSbMessage"]'})," which should contain the encoded version of the internal queuing information supplied by the resendable event."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"resend-events",children:"Resend Events"}),"\n",(0,s.jsx)(n.p,{children:'Resend events or "Resendable events" (defined by the Resendable status) are events generated within the stateful resend process. They are defined by one of two contracts. the first one is tailored to the Archeo ecosystem while the send is the contract used by Connxio internally to define the events. We do not recommend using the internal contract at present as this functionality is still in development. The contracts are as follows:'}),"\n",(0,s.jsx)(n.p,{children:"Archeo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class ArcheoLogStep\n{\n    public string TransactionId { get; set; }\n    public string TransactionType { get; set; }\n    public string MessageType { get; set; }\n    public string TransactionTag { get; set; }\n    public DateTime Processed { get; set; }\n    public string Sender { get; set; }\n    public string Receiver { get; set; }\n    public string Description { get; set; }\n    public string FileName { get; set; }\n    public string Status { get; set; }\n    public byte[] BodyContent { get; set; }\n    public IDictionary<string, string> Metadata { get; set; }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Internal"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"public class ResendEvent\n{\n    public string InterchangeId { get; set; }\n    public byte[] EventContent { get; set; }\n    public string EventContentUri { get; set; }\n    public string QueueDrainingConfigId { get; set; }\n    public string TopicName { get; set; }\n    public string DlqPath { get; set; }\n    public string Reason { get; set; }\n    public string Filename { get; set; }\n    public DateTime? EnqueueTime { get; set; }\n    public string OriginalSbMessage { get; set; }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var s=t(7294);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);